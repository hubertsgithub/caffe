name: "IntrinsicCNN"
layers {
  name: "data"
	type: MULTI_IMAGE_DATA
  top: "data"
  top: "chrom"
  top: "gradx"
  top: "grady"
  top: "mask"
  multi_prefetch_data_param {
  	  share_random_trafos: true
      # data - loaded as grayscale image
	  data_transformations {
		random_crop: true
		crop_size: 256
		crop_first: false
		mirror: false
		scale: 0.00392156862
		is_color: false
		gamma: 2.2
		mean_value: 128
		persistent: true
	  }
      # chromaticity image
	  data_transformations {
		random_crop: true
		crop_size: 256
		crop_first: false
		mirror: false
		scale: 0.00392156862
		is_color: true
		gamma: 2.2
		mean_value: 128
		mean_value: 128
		mean_value: 128
		persistent: true
	  }
      # label - x gradients
	  data_transformations {
		random_crop: true
		# crop a smaller region to align everything after the convolutions
		crop_size: 256
		crop_first: false
		mirror: false
		scale: 0.00392156862
		is_color: false
		persistent: true
	  }
      # label - y gradients
	  data_transformations {
		random_crop: true
		# crop a smaller region to align everything after the convolutions
		crop_size: 256
		crop_first: false
		mirror: false
		scale: 0.00392156862
		is_color: false
		persistent: true
	  }
      # mask 
	  data_transformations {
		random_crop: true
		# crop a smaller region to align everything after the convolutions
		crop_size: 256
		crop_first: false
		mirror: false
		scale: 0.00392156862
		is_color: false
		persistent: true
	  }
  }
  image_data_param {
    source: "data/synthetic-export/train_with_gradient.txt"
    batch_size: 7 
  }
  include: { phase: TRAIN }
}
layers {
  name: "data"
	type: MULTI_IMAGE_DATA
  top: "data"
  top: "chrom"
  top: "gradx"
  top: "grady"
  top: "mask"
  multi_prefetch_data_param {
  	  share_random_trafos: true
      # data - loaded as grayscale image
	  data_transformations {
		random_crop: true
		crop_size: 256
		crop_first: false
		mirror: false
		scale: 0.00392156862
		is_color: false
		gamma: 2.2
		mean_value: 128
		persistent: true
	  }
      # chromaticity image
	  data_transformations {
		random_crop: true
		crop_size: 256
		crop_first: false
		mirror: false
		scale: 0.00392156862
		is_color: true
		gamma: 2.2
		mean_value: 128
		mean_value: 128
		mean_value: 128
		persistent: true
	  }
      # label - x gradients
	  data_transformations {
		random_crop: true
		# crop a smaller region to align everything after the convolutions
		crop_size: 256
		crop_first: false
		mirror: false
		scale: 0.00392156862
		is_color: false
		persistent: true
	  }
      # label - y gradients
	  data_transformations {
		random_crop: true
		# crop a smaller region to align everything after the convolutions
		crop_size: 256
		crop_first: false
		mirror: false
		scale: 0.00392156862
		is_color: false
		persistent: true
	  }
      # mask 
	  data_transformations {
		random_crop: true
		# crop a smaller region to align everything after the convolutions
		crop_size: 256
		crop_first: false
		mirror: false
		scale: 0.00392156862
		is_color: false
		persistent: true
	  }
  }
  image_data_param {
    source: "data/synthetic-export/test_with_gradient.txt"
    batch_size: 1 
  }
  include: { phase: TEST }
}
layers {
  name: "concatinput"
  bottom: "data"
  bottom: "chrom"
  top: "concatinput"
  type: CONCAT
  concat_param {
    concat_dim: 1
  }
}
layers {
  name: "conv1"
  type: CONVOLUTION
  bottom: "concatinput"
  top: "conv1"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 32
    kernel_size: 5
    pad: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layers {
  name: "relu1"
  type: RELU
  bottom: "conv1"
  top: "conv1"
}
layers {
  name: "pool1"
  type: POOLING
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 1
    pad: 1
  }
}
layers {
  name: "conv2"
  type: CONVOLUTION
  bottom: "pool1"
  top: "conv2"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 64
    kernel_size: 5
    pad: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layers {
  name: "relu2"
  type: RELU
  bottom: "conv2"
  top: "conv2"
}
layers {
  name: "pool2"
  type: POOLING
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 1
    pad: 1
  }
}
layers {
  name: "conv3"
  type: CONVOLUTION
  bottom: "pool2"
  top: "conv3"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 96
    kernel_size: 3
    pad: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layers {
  name: "relu3"
  type: RELU
  bottom: "conv3"
  top: "conv3"
}
layers {
  name: "concatconv13out"
  bottom: "conv1"
  bottom: "conv3"
  top: "concatconv13out"
  type: CONCAT
  concat_param {
    concat_dim: 1
  }
}
layers {
  name: "conv4-gradx"
  type: CONVOLUTION
  bottom: "concatconv13out"
  top: "conv4-gradx"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 0
  weight_decay: 0
  convolution_param {
    num_output: 2 
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layers {
  name: "loss-gradx"
  type: SOFTMAX_LOSS
  bottom: "conv4-gradx"
  bottom: "gradx"
  bottom: "mask"
  top: "loss-gradx"
}
layers {
  name: "softmax-gradx"
  type: SOFTMAX
  bottom: "conv4-gradx"
  top: "softmax-gradx"
}
layers {
  name: "slice-gradx"
  type: SLICE
  bottom: "softmax-gradx"
  top: "slice-gradx-0"
  top: "slice-gradx-1"
  slice_param {
  	slice_point: 1
  }
}
layers {
  name: "conv4-grady"
  type: CONVOLUTION
  bottom: "concatconv13out"
  top: "conv4-grady"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 0
  weight_decay: 0
  convolution_param {
    num_output: 2 
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layers {
  name: "loss-grady"
  type: SOFTMAX_LOSS
  bottom: "conv4-grady"
  bottom: "grady"
  bottom: "mask"
  top: "loss-grady"
}
layers {
  name: "softmax-grady"
  type: SOFTMAX
  bottom: "conv4-grady"
  top: "softmax-grady"
}
layers {
  name: "slice-grady"
  type: SLICE
  bottom: "softmax-grady"
  top: "slice-grady-0"
  top: "slice-grady-1"
  slice_param {
  	slice_point: 1
  }
}
layers {
	name: "silentmask"
	type: SILENCE
	bottom: "mask"
	bottom: "slice-gradx-0"
	bottom: "slice-grady-0"
	bottom: "slice-gradx-1"
	bottom: "slice-grady-1"
}
#layers {
#	name: "imgsave"
#	type: IMAGE_OUTPUT
#	bottom: "data"
#	bottom: "chrom"
#	bottom: "gradx"
#	bottom: "slice-gradx-0"
#	bottom: "slice-gradx-1"
#	bottom: "grady"
#	bottom: "slice-grady-0"
#	bottom: "slice-grady-1"
#	image_output_param {
#		file_name: "debugimgs/iiw_retinex/img"
#		display: 5000
#		transformation {
#			upscale: 255.0
#			mean_to_add: 128.0
#		}
#		transformation {
#			upscale: 255.0
#			mean_to_add: 128.0
#		}
#		transformation {
#			upscale: 255.0
#			mean_to_add: 0.0
#		}
#		transformation {
#			upscale: 255.0
#			mean_to_add: 0.0
#		}
#		transformation {
#			upscale: 255.0
#			mean_to_add: 0.0
#		}
#		transformation {
#			upscale: 255.0
#			mean_to_add: 0.0
#		}
#		transformation {
#			upscale: 255.0
#			mean_to_add: 0.0
#		}
#		transformation {
#			upscale: 255.0
#			mean_to_add: 0.0
#		}
#	}
#    include: { phase: TRAIN }
#}
#layers {
#	name: "imgsave"
#	type: IMAGE_OUTPUT
#	bottom: "data"
#	bottom: "chrom"
#	bottom: "gradx"
#	bottom: "slice-gradx-0"
#	bottom: "slice-gradx-1"
#	bottom: "grady"
#	bottom: "slice-grady-0"
#	bottom: "slice-grady-1"
#	image_output_param {
#		file_name: "debugimgs/iiw_retinex/testimg"
#		display: 1
#		transformation {
#			upscale: 255.0
#			mean_to_add: 128.0
#		}
#		transformation {
#			upscale: 255.0
#			mean_to_add: 128.0
#		}
#		transformation {
#			upscale: 255.0
#			mean_to_add: 0.0
#		}
#		transformation {
#			upscale: 255.0
#			mean_to_add: 0.0
#		}
#		transformation {
#			upscale: 255.0
#			mean_to_add: 0.0
#		}
#		transformation {
#			upscale: 255.0
#			mean_to_add: 0.0
#		}
#		transformation {
#			upscale: 255.0
#			mean_to_add: 0.0
#		}
#		transformation {
#			upscale: 255.0
#			mean_to_add: 0.0
#		}
#	}
#    include: { phase: TEST } 
#}
